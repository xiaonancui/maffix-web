name: Security Checks

on:
  push:
    branches: [main, develop]
  pull_request:
    branches: [main, develop]
  schedule:
    # 每周一凌晨 2 点运行安全检查
    - cron: '0 2 * * 1'

jobs:
  dependency-security:
    name: Dependency Security Audit
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18.19.0'
          cache: 'npm'

      - name: Install dependencies
        run: |
          npm ci
          npm run install:all

      - name: Run npm audit
        run: |
          echo "Running npm security audit..."
          npm audit --audit-level=moderate

      - name: Check for known vulnerabilities
        run: |
          echo "Checking for known vulnerabilities in dependencies..."
          npm audit --audit-level=high --json > audit-results.json || true

          # 检查是否有高危漏洞
          if [ -f audit-results.json ]; then
            high_vulns=$(cat audit-results.json | jq '.metadata.vulnerabilities.high // 0')
            critical_vulns=$(cat audit-results.json | jq '.metadata.vulnerabilities.critical // 0')
            
            echo "High vulnerabilities: $high_vulns"
            echo "Critical vulnerabilities: $critical_vulns"
            
            if [ "$critical_vulns" -gt 0 ]; then
              echo "❌ Critical vulnerabilities found! Please fix immediately."
              exit 1
            elif [ "$high_vulns" -gt 0 ]; then
              echo "⚠️ High vulnerabilities found. Please review and fix."
              exit 1
            else
              echo "✅ No high or critical vulnerabilities found."
            fi
          fi

      - name: Upload audit results
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: security-audit-results
          path: audit-results.json
          retention-days: 30

  code-security-scan:
    name: Code Security Scan
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@master
        with:
          scan-type: 'fs'
          scan-ref: '.'
          format: 'sarif'
          output: 'trivy-results.sarif'
          severity: 'CRITICAL,HIGH,MEDIUM'

      - name: Upload Trivy scan results to GitHub Security tab
        uses: github/codeql-action/upload-sarif@v3
        if: always()
        with:
          sarif_file: 'trivy-results.sarif'

  secret-scan:
    name: Secret Scanning
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Run TruffleHog OSS
        uses: trufflesecurity/trufflehog@main
        with:
          path: ./
          base: ${{ github.event.repository.default_branch }}
          head: HEAD
          extra_args: --debug --only-verified

  license-check:
    name: License Compliance Check
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18.19.0'
          cache: 'npm'

      - name: Install dependencies
        run: |
          npm ci
          npm run install:all

      - name: Install license checker
        run: npm install -g license-checker

      - name: Check licenses
        run: |
          echo "Checking dependency licenses..."

          # 检查前端依赖许可证
          cd frontend
          license-checker --onlyAllow 'MIT;Apache-2.0;BSD-2-Clause;BSD-3-Clause;ISC;0BSD;CC0-1.0' --excludePrivatePackages || {
            echo "❌ Found dependencies with incompatible licenses in frontend"
            license-checker --summary
            exit 1
          }

          cd ../backend
          license-checker --onlyAllow 'MIT;Apache-2.0;BSD-2-Clause;BSD-3-Clause;ISC;0BSD;CC0-1.0' --excludePrivatePackages || {
            echo "❌ Found dependencies with incompatible licenses in backend"
            license-checker --summary
            exit 1
          }

          echo "✅ All dependency licenses are compatible"

  docker-security:
    name: Docker Security Scan
    runs-on: ubuntu-latest
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Build Docker image for scanning
        run: |
          # 创建临时 Dockerfile 用于扫描
          cat > Dockerfile.scan << EOF
          FROM node:18.19.0-alpine
          WORKDIR /app
          COPY package*.json ./
          RUN npm ci --only=production
          COPY . .
          EXPOSE 3000
          CMD ["npm", "start"]
          EOF

      - name: Build Docker image
        run: docker build -f Dockerfile.scan -t tententen-security-scan:latest .

      - name: Run Trivy container scan
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: 'tententen-security-scan:latest'
          format: 'sarif'
          output: 'docker-trivy-results.sarif'

      - name: Upload Docker scan results
        uses: github/codeql-action/upload-sarif@v3
        if: always()
        with:
          sarif_file: 'docker-trivy-results.sarif'

  security-policy-check:
    name: Security Policy Compliance
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Check security policy files
        run: |
          echo "Checking for security policy files..."

          # 检查是否存在安全相关文件
          files_to_check=(
            "SECURITY.md"
            ".github/SECURITY.md"
            "docs/SECURITY.md"
          )

          found_security_file=false
          for file in "${files_to_check[@]}"; do
            if [ -f "$file" ]; then
              echo "✅ Found security policy: $file"
              found_security_file=true
              break
            fi
          done

          if [ "$found_security_file" = false ]; then
            echo "⚠️ No security policy file found. Consider adding SECURITY.md"
          fi

      - name: Check for sensitive file patterns
        run: |
          echo "Checking for sensitive file patterns..."

          # 检查是否存在敏感文件
          sensitive_patterns=(
            "*.pem"
            "*.key"
            "*.p12"
            "*.pfx"
            ".env"
            ".env.local"
            ".env.production"
            "id_rsa"
            "id_dsa"
            "*.crt"
            "*.cer"
          )

          found_sensitive=false
          for pattern in "${sensitive_patterns[@]}"; do
            if find . -name "$pattern" -not -path "./node_modules/*" -not -path "./.git/*" | grep -q .; then
              echo "⚠️ Found potentially sensitive files matching: $pattern"
              find . -name "$pattern" -not -path "./node_modules/*" -not -path "./.git/*"
              found_sensitive=true
            fi
          done

          if [ "$found_sensitive" = false ]; then
            echo "✅ No sensitive file patterns detected"
          fi
