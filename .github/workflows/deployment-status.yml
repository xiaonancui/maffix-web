name: Deployment Status

on:
  deployment_status:

jobs:
  notify-deployment:
    name: Notify Deployment Status
    runs-on: ubuntu-latest
    if: github.event.deployment_status.state == 'success' || github.event.deployment_status.state == 'failure'

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Get deployment info
        id: deployment
        run: |
          echo "environment=${{ github.event.deployment.environment }}" >> $GITHUB_OUTPUT
          echo "state=${{ github.event.deployment_status.state }}" >> $GITHUB_OUTPUT
          echo "url=${{ github.event.deployment_status.target_url }}" >> $GITHUB_OUTPUT
          echo "sha=${{ github.event.deployment.sha }}" >> $GITHUB_OUTPUT

      - name: Success notification
        if: github.event.deployment_status.state == 'success'
        run: |
          echo "üéâ Deployment successful!"
          echo "Environment: ${{ steps.deployment.outputs.environment }}"
          echo "URL: ${{ steps.deployment.outputs.url }}"
          echo "Commit: ${{ steps.deployment.outputs.sha }}"

      - name: Failure notification
        if: github.event.deployment_status.state == 'failure'
        run: |
          echo "‚ùå Deployment failed!"
          echo "Environment: ${{ steps.deployment.outputs.environment }}"
          echo "URL: ${{ steps.deployment.outputs.url }}"
          echo "Commit: ${{ steps.deployment.outputs.sha }}"

      - name: Create deployment comment (on PR)
        if: github.event.deployment_status.state == 'success' && github.event.deployment.environment != 'production'
        uses: actions/github-script@v7
        with:
          script: |
            const { data: pullRequests } = await github.rest.pulls.list({
              owner: context.repo.owner,
              repo: context.repo.repo,
              head: `${context.repo.owner}:${context.ref.replace('refs/heads/', '')}`,
              state: 'open'
            });

            if (pullRequests.length > 0) {
              const pr = pullRequests[0];
              await github.rest.issues.createComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: pr.number,
                body: `üöÄ **Preview deployment successful!**
                
                **Environment:** ${{ steps.deployment.outputs.environment }}
                **URL:** ${{ steps.deployment.outputs.url }}
                **Commit:** \`${{ steps.deployment.outputs.sha }}\`
                
                The preview deployment is ready for testing! üéØ`
              });
            }

  health-check:
    name: Post-Deployment Health Check
    runs-on: ubuntu-latest
    needs: notify-deployment
    if: github.event.deployment_status.state == 'success'

    steps:
      - name: Wait for deployment to be ready
        run: sleep 30

      - name: Health check
        run: |
          url="${{ github.event.deployment_status.target_url }}"
          if [ -n "$url" ]; then
            echo "Checking health of: $url"
            
            # Basic health check
            response=$(curl -s -o /dev/null -w "%{http_code}" "$url" || echo "000")
            
            if [ "$response" = "200" ]; then
              echo "‚úÖ Health check passed - HTTP $response"
            else
              echo "‚ö†Ô∏è Health check warning - HTTP $response"
            fi
            
            # Check if it's a Next.js app by looking for specific headers or content
            headers=$(curl -s -I "$url" || echo "")
            if echo "$headers" | grep -i "x-powered-by.*next" > /dev/null; then
              echo "‚úÖ Next.js application detected"
            fi
          else
            echo "‚ö†Ô∏è No deployment URL available for health check"
          fi

      - name: Performance check
        run: |
          url="${{ github.event.deployment_status.target_url }}"
          if [ -n "$url" ]; then
            echo "Running basic performance check..."
            
            # Measure response time
            response_time=$(curl -s -o /dev/null -w "%{time_total}" "$url" || echo "0")
            echo "Response time: ${response_time}s"
            
            # Check if response time is reasonable (less than 5 seconds)
            if (( $(echo "$response_time < 5.0" | bc -l) )); then
              echo "‚úÖ Performance check passed"
            else
              echo "‚ö†Ô∏è Performance check warning - slow response time"
            fi
          fi
        continue-on-error: true
