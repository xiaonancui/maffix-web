name: CI/CD

on:
  push:
    branches: [main, develop]
  pull_request:
    branches: [main, develop]

env:
  NODE_VERSION: "18.19.0"
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}/backend

jobs:
  test-and-build:
    name: Test & Build
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: "npm"

      - name: Install dependencies
        env:
          CI: true
        run: |
          npm ci --ignore-scripts
          npm run install:all

      # Code Quality Checks
      - name: Check code formatting
        run: npm run format:check

      - name: Run linting
        run: npm run lint

      - name: Type checking
        run: npm run type-check

      # Security - Basic Only
      - name: Security audit
        run: npm audit --audit-level=high
        continue-on-error: true

      # Tests
      - name: Run tests
        run: npm run test
        continue-on-error: true

      # Build Frontend
      - name: Build frontend
        run: npm run build:frontend
        env:
          NEXTAUTH_SECRET: ${{ secrets.NEXTAUTH_SECRET || 'test-secret-for-ci' }}
          NEXTAUTH_URL: http://localhost:3000
          GOOGLE_CLIENT_ID: ${{ secrets.GOOGLE_CLIENT_ID || 'test-google-id' }}
          GOOGLE_CLIENT_SECRET: ${{ secrets.GOOGLE_CLIENT_SECRET || 'test-google-secret' }}
          TIKTOK_CLIENT_ID: ${{ secrets.TIKTOK_CLIENT_ID || 'test-tiktok-id' }}
          TIKTOK_CLIENT_SECRET: ${{ secrets.TIKTOK_CLIENT_SECRET || 'test-tiktok-secret' }}

      # Build Backend
      - name: Build backend
        run: npm run build:backend
        env:
          DATABASE_URL: ${{ secrets.DATABASE_URL || 'postgresql://test:test@localhost:5432/test' }}
          JWT_SECRET: ${{ secrets.JWT_SECRET || 'test-jwt-secret' }}

      # Upload backend build artifacts
      - name: Upload backend artifacts
        uses: actions/upload-artifact@v4
        with:
          name: backend-dist
          path: backend/dist
          retention-days: 7

  # Docker Build (for containerized deployments)
  docker-build:
    name: Build Docker Image
    runs-on: ubuntu-latest
    needs: test-and-build
    if: github.event_name == 'push'

    permissions:
      contents: read
      packages: write

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=semver,pattern={{version}}
            type=semver,pattern={{major}}.{{minor}}
            type=sha,prefix={{branch}}-

      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: ./backend
          file: ./backend/Dockerfile
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

  # Deploy to Production (only on main branch)
  deploy-production:
    name: Deploy to Production
    runs-on: ubuntu-latest
    needs: [test-and-build, docker-build]
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'

    environment:
      name: production
      url: https://api.tententen.com

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Download backend artifacts
        uses: actions/download-artifact@v3
        with:
          name: backend-dist
          path: backend/dist

      - name: Deploy to production
        run: |
          echo "ðŸš€ Deploying to production..."
          echo "Backend artifacts downloaded"
          echo "Ready for deployment to your hosting provider"
          # Add your deployment commands here
          # Examples:
          # - Deploy to Vercel: vercel --prod
          # - Deploy to Railway: railway up
          # - Deploy to Render: render deploy
          # - Deploy to AWS: aws deploy ...
          # - Deploy to DigitalOcean: doctl apps create-deployment ...

  # Deploy to Staging (on develop branch)
  deploy-staging:
    name: Deploy to Staging
    runs-on: ubuntu-latest
    needs: [test-and-build, docker-build]
    if: github.ref == 'refs/heads/develop' && github.event_name == 'push'

    environment:
      name: staging
      url: https://staging-api.tententen.com

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Download backend artifacts
        uses: actions/download-artifact@v3
        with:
          name: backend-dist
          path: backend/dist

      - name: Deploy to staging
        run: |
          echo "ðŸš€ Deploying to staging..."
          echo "Backend artifacts downloaded"
          echo "Ready for deployment to staging environment"
