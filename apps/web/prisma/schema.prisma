// =============================================================================
// Maffix Database Schema
// =============================================================================
// This schema defines the database structure for the Maffix platform
// Independent musician fan engagement platform with gamified experiences
// =============================================================================

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// =============================================================================
// User Management
// =============================================================================

model User {
  id        String   @id @default(uuid())
  email     String   @unique
  name      String
  password  String?  // Nullable for OAuth users
  role      Role     @default(USER)
  avatar    String?

  // Gamification
  diamondBalance Int      @default(0)
  points         Int      @default(0)
  level          Int      @default(1)

  // Gacha pity system
  gachaPityCounter Int    @default(0)  // Tracks pulls since last SSR+ for guarantee

  // OAuth
  provider       String?  // google, tiktok, discord, etc.
  providerId     String?  // ID from OAuth provider

  // TikTok integration
  tiktokUsername      String?   // TikTok username
  tiktokUserId        String?   // TikTok user ID
  tiktokAccessToken   String?   @db.Text // TikTok OAuth access token (encrypted)
  tiktokRefreshToken  String?   @db.Text // TikTok OAuth refresh token (encrypted)
  tiktokTokenExpiry   DateTime? // When the access token expires
  tiktokLinkedAt      DateTime? // When TikTok account was linked

  // Timestamps
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  lastLoginAt DateTime?

  // Relations
  completedTasks UserTask[]
  prizes         UserPrize[]
  gachaPulls     GachaPull[]
  drawTickets    DrawTicket[]
  transactions   Transaction[]
  accounts       Account[]
  sessions       Session[]

  @@index([email])
  @@index([provider, providerId])
  @@map("users")
}

// NextAuth Models
model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("accounts")
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("sessions")
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
  @@map("verification_tokens")
}

enum Role {
  USER
  ADMIN
  ARTIST
}

// =============================================================================
// Task Management
// =============================================================================

model Task {
  id          String   @id @default(uuid())
  title       String
  description String
  type        TaskType
  difficulty  Difficulty @default(EASY)

  // Mission type (for TikTok missions)
  missionType String?  // FOLLOW, LIKE, REPOST, USE_AUDIO

  // Rewards
  points      Int      @default(0)
  diamonds    Int      @default(0)

  // Status
  isActive    Boolean  @default(true)
  startDate   DateTime?
  endDate     DateTime?

  // Limits
  maxCompletions Int?  // Max times this task can be completed globally
  completionCount Int @default(0)

  // Timestamps
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  completions UserTask[]

  @@index([type])
  @@index([isActive])
  @@map("tasks")
}

enum TaskType {
  SOCIAL      // Follow, share, like
  CONTENT     // Write review, create content
  DAILY       // Daily check-in
  PROFILE     // Complete profile
  REFERRAL    // Invite friends
  PURCHASE    // Make a purchase
  EVENT       // Attend event
}

enum Difficulty {
  EASY
  MEDIUM
  HARD
}

// =============================================================================
// User Task Completion
// =============================================================================

model UserTask {
  id          String   @id @default(uuid())
  userId      String
  taskId      String

  // Completion details
  submittedAt DateTime @default(now())  // When user submitted
  completedAt DateTime?  // When task was verified and completed
  pointsEarned Int
  diamondsEarned Int

  // Verification
  verified    Boolean  @default(false)
  verifiedAt  DateTime?
  verifiedBy  String?  // Admin user ID
  verificationStatus VerificationStatus @default(PENDING)

  // Relations
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  task        Task     @relation(fields: [taskId], references: [id], onDelete: Cascade)

  @@unique([userId, taskId])
  @@index([userId])
  @@index([taskId])
  @@map("user_tasks")
}

enum VerificationStatus {
  PENDING
  APPROVED
  FAILED
}

// =============================================================================
// Prize System
// =============================================================================

model Prize {
  id          String   @id @default(uuid())
  name        String
  description String
  rarity      Rarity

  // Prize details
  image       String?
  value       Int      @default(0)  // Diamond value
  type        PrizeType

  // Availability
  isActive    Boolean  @default(true)
  stock       Int?     // Null = unlimited

  // Timestamps
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  userPrizes  UserPrize[]
  gachaItems  GachaItem[]
  gachaPulls  GachaPull[]

  @@index([rarity])
  @@index([isActive])
  @@map("prizes")
}

enum Rarity {
  COMMON      // 60% - Common items
  RARE        // 25% - Rare items
  EPIC        // 10% - Epic items
  SSR         // 4% - Super Super Rare items
  LEGENDARY   // 1% - Legendary items (highest rarity)
}

enum PrizeType {
  PHYSICAL    // Physical merchandise
  DIGITAL     // Digital content
  EXPERIENCE  // Meet & greet, concert tickets
  DISCOUNT    // Discount codes
  EXCLUSIVE   // Exclusive content access
}

// =============================================================================
// User Prize Ownership
// =============================================================================

model UserPrize {
  id          String   @id @default(uuid())
  userId      String
  prizeId     String
  
  // Acquisition details
  acquiredAt  DateTime @default(now())
  source      PrizeSource
  
  // Redemption
  redeemed    Boolean  @default(false)
  redeemedAt  DateTime?
  
  // Relations
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  prize       Prize    @relation(fields: [prizeId], references: [id], onDelete: Cascade)
  
  @@index([userId])
  @@index([prizeId])
  @@map("user_prizes")
}

enum PrizeSource {
  GACHA
  PURCHASE
  REWARD
  GIFT
}

// =============================================================================
// Gacha System
// =============================================================================

model GachaItem {
  id          String   @id @default(uuid())
  prizeId     String
  
  // Probability (0-100)
  probability Float
  
  // Pity system
  pityCounter Int      @default(0)
  
  // Status
  isActive    Boolean  @default(true)
  
  // Timestamps
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  
  // Relations
  prize       Prize    @relation(fields: [prizeId], references: [id], onDelete: Cascade)
  pulls       GachaPull[]
  
  @@index([isActive])
  @@map("gacha_items")
}

model GachaPull {
  id          String   @id @default(uuid())
  userId      String
  gachaItemId String
  prizeId     String?  // Prize won (if any)

  // Pull details
  pulledAt    DateTime @default(now())
  cost        Int      // Diamonds spent

  // Multi-pull tracking
  pullType    PullType @default(SINGLE)  // SINGLE or MULTI_10X
  batchId     String?  // Groups 10x pulls together
  pullIndex   Int?     // Position in 10x pull (0-9)

  // SSR guarantee tracking
  wasGuaranteed Boolean @default(false)  // True if this was a forced SSR from guarantee

  // Result
  won         Boolean  @default(false)

  // Relations
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  gachaItem   GachaItem @relation(fields: [gachaItemId], references: [id], onDelete: Cascade)
  prize       Prize?   @relation(fields: [prizeId], references: [id], onDelete: SetNull)

  @@index([userId])
  @@index([gachaItemId])
  @@index([batchId])
  @@map("gacha_pulls")
}

enum PullType {
  SINGLE
  MULTI_10X
}

// =============================================================================
// Draw Ticket System
// =============================================================================

model DrawTicket {
  id          String   @id @default(uuid())
  userId      String

  // Ticket details
  ticketType  TicketType @default(SINGLE)  // SINGLE or MULTI_10X
  quantity    Int      @default(1)

  // Source
  source      String   // "PURCHASE", "REWARD", "GIFT", "PREMIUM_PACK"
  sourceRef   String?  // Reference to purchase/pack ID

  // Expiry
  expiresAt   DateTime?  // Null = never expires

  // Status
  used        Boolean  @default(false)
  usedAt      DateTime?

  // Timestamps
  createdAt   DateTime @default(now())

  // Relations
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@index([used])
  @@index([expiresAt])
  @@map("draw_tickets")
}

enum TicketType {
  SINGLE      // Single draw ticket
  MULTI_10X   // 10x draw ticket
}

// =============================================================================
// Transaction History
// =============================================================================

model Transaction {
  id          String   @id @default(uuid())
  userId      String
  
  // Transaction details
  type        TransactionType
  amount      Int      // Diamonds or points
  currency    Currency
  
  // Description
  description String
  reference   String?  // Reference to related entity (taskId, prizeId, etc.)
  
  // Status
  status      TransactionStatus @default(COMPLETED)
  
  // Timestamps
  createdAt   DateTime @default(now())
  
  // Relations
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  @@index([userId])
  @@index([type])
  @@index([createdAt])
  @@map("transactions")
}

enum TransactionType {
  EARN        // Earned from tasks
  SPEND       // Spent on gacha/prizes
  PURCHASE    // Purchased with real money
  GIFT        // Received as gift
  REFUND      // Refunded
  ADJUSTMENT  // Admin adjustment
}

enum Currency {
  DIAMONDS
  POINTS
}

enum TransactionStatus {
  PENDING
  COMPLETED
  FAILED
  CANCELLED
}

