// =============================================================================
// Maffix Database Schema
// =============================================================================
// This schema defines the database structure for the Maffix platform
// Independent musician fan engagement platform with gamified experiences
// =============================================================================

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// =============================================================================
// User Management
// =============================================================================

model User {
  id        String   @id @default(uuid())
  email     String   @unique
  name      String
  password  String?  // Nullable for OAuth users
  role      Role     @default(USER)
  avatar    String?

  // Gamification
  diamondBalance Int      @default(0)
  points         Int      @default(0)
  level          Int      @default(1)

  // Gacha pity system
  gachaPityCounter Int    @default(0)  // Tracks pulls since last SSR+ for guarantee

  // OAuth
  provider       String?  // google, tiktok, discord, etc.
  providerId     String?  // ID from OAuth provider

  // TikTok integration
  tiktokUsername      String?   // TikTok username
  tiktokUserId        String?   // TikTok user ID
  tiktokAccessToken   String?   @db.Text // TikTok OAuth access token (encrypted)
  tiktokRefreshToken  String?   @db.Text // TikTok OAuth refresh token (encrypted)
  tiktokTokenExpiry   DateTime? // When the access token expires
  tiktokLinkedAt      DateTime? // When TikTok account was linked

  // Timestamps
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  lastLoginAt DateTime?

  // Relations
  completedTasks UserTask[]
  prizes         UserPrize[]
  gachaPulls     GachaPull[]
  drawTickets    DrawTicket[]
  transactions   Transaction[]
  purchases      Purchase[]
  verificationJobs MissionVerificationJob[]
  cart           Cart?
  orders         Order[]
  accounts       Account[]
  sessions       Session[]

  @@index([email])
  @@index([provider, providerId])
  @@index([tiktokUsername])
  @@map("users")
}

// NextAuth Models
model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("accounts")
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("sessions")
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
  @@map("verification_tokens")
}

enum Role {
  USER
  ADMIN
  ARTIST
}

// =============================================================================
// Task Management
// =============================================================================

model Task {
  id          String   @id @default(uuid())
  title       String
  description String
  type        TaskType
  difficulty  Difficulty @default(EASY)

  // Mission type (for TikTok missions)
  missionType MissionType?

  // TikTok mission targets
  targetTikTokAccount String?  // TikTok username to follow
  targetVideoUrl      String?  // TikTok video URL to like/repost
  targetAudioId       String?  // TikTok audio ID to use

  // Verification settings
  autoVerify          Boolean  @default(false)  // Auto-verify via API or require manual verification
  verificationStatus  String?  // Additional verification metadata

  // Rewards
  points      Int      @default(0)
  diamonds    Int      @default(0)

  // Status
  isActive    Boolean  @default(true)
  startDate   DateTime?
  endDate     DateTime?

  // Limits
  maxCompletions Int?  // Max times this task can be completed globally
  completionCount Int @default(0)

  // Timestamps
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  completions UserTask[]
  verificationJobs MissionVerificationJob[]

  @@index([type])
  @@index([isActive])
  @@index([missionType])
  @@map("tasks")
}

enum TaskType {
  SOCIAL      // Follow, share, like
  CONTENT     // Write review, create content
  DAILY       // Daily check-in
  PROFILE     // Complete profile
  REFERRAL    // Invite friends
  PURCHASE    // Make a purchase
  EVENT       // Attend event
}

enum MissionType {
  FOLLOW      // Follow a TikTok account
  LIKE        // Like a TikTok video
  REPOST      // Repost/share a TikTok video
  USE_AUDIO   // Create a video using specific audio
}

enum Difficulty {
  EASY
  MEDIUM
  HARD
}

// =============================================================================
// User Task Completion
// =============================================================================

model UserTask {
  id          String   @id @default(uuid())
  userId      String
  taskId      String

  // Completion details
  submittedAt DateTime @default(now())  // When user submitted
  completedAt DateTime?  // When task was verified and completed
  pointsEarned Int
  diamondsEarned Int

  // Verification
  verified    Boolean  @default(false)
  verifiedAt  DateTime?
  verifiedBy  String?  // Admin user ID
  verificationStatus VerificationStatus @default(PENDING)

  // Relations
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  task        Task     @relation(fields: [taskId], references: [id], onDelete: Cascade)
  verificationJob MissionVerificationJob?

  @@unique([userId, taskId])
  @@index([userId])
  @@index([taskId])
  @@index([verificationStatus])
  @@map("user_tasks")
}

enum VerificationStatus {
  PENDING
  APPROVED
  FAILED
}

// =============================================================================
// Prize System
// =============================================================================

model Prize {
  id          String   @id @default(uuid())
  name        String
  description String
  rarity      Rarity

  // Prize details
  image       String?
  value       Int      @default(0)  // Diamond value
  type        PrizeType

  // Availability
  isActive    Boolean  @default(true)
  stock       Int?     // Null = unlimited

  // Timestamps
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  userPrizes   UserPrize[]
  gachaItems   GachaItem[]
  gachaPulls   GachaPull[]
  premiumPacks PremiumPack[]

  @@index([rarity])
  @@index([isActive])
  @@map("prizes")
}

enum Rarity {
  COMMON      // 60% - Common items
  RARE        // 25% - Rare items
  EPIC        // 10% - Epic items
  SSR         // 4% - Super Super Rare items
  LEGENDARY   // 1% - Legendary items (highest rarity)
}

enum PrizeType {
  PHYSICAL    // Physical merchandise
  DIGITAL     // Digital content
  EXPERIENCE  // Meet & greet, concert tickets
  DISCOUNT    // Discount codes
  EXCLUSIVE   // Exclusive content access
}

// =============================================================================
// User Prize Ownership
// =============================================================================

model UserPrize {
  id          String   @id @default(uuid())
  userId      String
  prizeId     String
  
  // Acquisition details
  acquiredAt  DateTime @default(now())
  source      PrizeSource
  
  // Redemption
  redeemed    Boolean  @default(false)
  redeemedAt  DateTime?
  
  // Relations
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  prize       Prize    @relation(fields: [prizeId], references: [id], onDelete: Cascade)
  
  @@index([userId])
  @@index([prizeId])
  @@map("user_prizes")
}

enum PrizeSource {
  GACHA
  PURCHASE
  REWARD
  GIFT
}

// =============================================================================
// Gacha System
// =============================================================================

model GachaItem {
  id          String   @id @default(uuid())
  prizeId     String
  
  // Probability (0-100)
  probability Float
  
  // Pity system
  pityCounter Int      @default(0)
  
  // Status
  isActive    Boolean  @default(true)
  
  // Timestamps
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  
  // Relations
  prize       Prize    @relation(fields: [prizeId], references: [id], onDelete: Cascade)
  pulls       GachaPull[]
  
  @@index([isActive])
  @@map("gacha_items")
}

model GachaPull {
  id          String   @id @default(uuid())
  userId      String
  gachaItemId String
  prizeId     String?  // Prize won (if any)

  // Pull details
  pulledAt    DateTime @default(now())
  cost        Int      // Diamonds spent

  // Multi-pull tracking
  pullType    PullType @default(SINGLE)  // SINGLE or MULTI_10X
  batchId     String?  // Groups 10x pulls together
  pullIndex   Int?     // Position in 10x pull (0-9)

  // SSR guarantee tracking
  wasGuaranteed Boolean @default(false)  // True if this was a forced SSR from guarantee

  // Result
  won         Boolean  @default(false)

  // Relations
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  gachaItem   GachaItem @relation(fields: [gachaItemId], references: [id], onDelete: Cascade)
  prize       Prize?   @relation(fields: [prizeId], references: [id], onDelete: SetNull)

  @@index([userId])
  @@index([gachaItemId])
  @@index([batchId])
  @@map("gacha_pulls")
}

enum PullType {
  SINGLE
  MULTI_10X
}

// =============================================================================
// Draw Ticket System
// =============================================================================

model DrawTicket {
  id          String   @id @default(uuid())
  userId      String

  // Ticket details
  ticketType  TicketType @default(SINGLE)  // SINGLE or MULTI_10X
  quantity    Int      @default(1)

  // Source
  source      String   // "PURCHASE", "REWARD", "GIFT", "PREMIUM_PACK"
  sourceRef   String?  // Reference to purchase/pack ID

  // Expiry
  expiresAt   DateTime?  // Null = never expires

  // Status
  used        Boolean  @default(false)
  usedAt      DateTime?

  // Timestamps
  createdAt   DateTime @default(now())

  // Relations
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@index([used])
  @@index([expiresAt])
  @@map("draw_tickets")
}

enum TicketType {
  SINGLE      // Single draw ticket
  MULTI_10X   // 10x draw ticket
}

// =============================================================================
// Transaction History
// =============================================================================

model Transaction {
  id          String   @id @default(uuid())
  userId      String
  
  // Transaction details
  type        TransactionType
  amount      Int      // Diamonds or points
  currency    Currency
  
  // Description
  description String
  reference   String?  // Reference to related entity (taskId, prizeId, etc.)
  
  // Status
  status      TransactionStatus @default(COMPLETED)
  
  // Timestamps
  createdAt   DateTime @default(now())
  
  // Relations
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  @@index([userId])
  @@index([type])
  @@index([createdAt])
  @@map("transactions")
}

enum TransactionType {
  EARN        // Earned from tasks
  SPEND       // Spent on gacha/prizes
  PURCHASE    // Purchased with real money
  GIFT        // Received as gift
  REFUND      // Refunded
  ADJUSTMENT  // Admin adjustment
}

enum Currency {
  DIAMONDS
  POINTS
}

enum TransactionStatus {
  PENDING
  COMPLETED
  FAILED
  CANCELLED
}

// =============================================================================
// Monetization System - Premium Packs
// =============================================================================

model PremiumPack {
  id          String   @id @default(uuid())
  name        String
  description String   @db.Text

  // Pricing
  price       Float    // Price in USD (or local currency)
  currency    String   @default("USD")

  // Pack contents
  guaranteedPrizeId String?  // Guaranteed merchandise/prize
  bonusTickets      Int      @default(0)  // Number of bonus draw tickets
  bonusDiamonds     Int      @default(0)  // Bonus diamonds included

  // Display
  imageUrl    String?
  featured    Boolean  @default(false)
  sortOrder   Int      @default(0)

  // Availability
  isActive    Boolean  @default(true)

  // Timestamps
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  guaranteedPrize Prize?     @relation(fields: [guaranteedPrizeId], references: [id], onDelete: SetNull)
  purchases       Purchase[]

  @@index([isActive])
  @@index([featured])
  @@map("premium_packs")
}

model Purchase {
  id          String   @id @default(uuid())
  userId      String
  packId      String

  // Payment details
  klarnaOrderId   String?  @unique  // Klarna order ID
  stripeSessionId String?  @unique  // Stripe session ID (alternative)
  paymentMethod   PaymentMethod @default(KLARNA)

  // Amount
  amount      Float    // Amount paid
  currency    String   @default("USD")

  // Status
  status      PurchaseStatus @default(PENDING)

  // Fulfillment
  itemsGranted    Boolean  @default(false)  // Whether items were granted to user
  ticketsGranted  Boolean  @default(false)  // Whether tickets were granted
  diamondsGranted Boolean  @default(false)  // Whether diamonds were granted

  // Timestamps
  createdAt   DateTime @default(now())
  completedAt DateTime?

  // Relations
  user        User         @relation(fields: [userId], references: [id], onDelete: Cascade)
  pack        PremiumPack  @relation(fields: [packId], references: [id], onDelete: Restrict)

  @@index([userId])
  @@index([packId])
  @@index([status])
  @@index([klarnaOrderId])
  @@index([stripeSessionId])
  @@map("purchases")
}

enum PaymentMethod {
  KLARNA
  STRIPE
  PAYPAL
}

enum PurchaseStatus {
  PENDING       // Payment initiated but not completed
  PROCESSING    // Payment received, processing fulfillment
  COMPLETED     // Payment completed and items granted
  FAILED        // Payment failed
  CANCELLED     // Payment cancelled by user
  REFUNDED      // Payment refunded
}

// =============================================================================
// Mission Verification System
// =============================================================================

model MissionVerificationJob {
  id          String   @id @default(uuid())
  userId      String
  taskId      String
  userTaskId  String   @unique  // Link to UserTask record

  // Job details
  missionType MissionType
  status      JobStatus @default(PENDING)

  // Verification data
  tiktokUsername  String?  // User's TikTok username
  targetData      String?  // JSON string with target info (account, video URL, audio ID)

  // Results
  verificationResult Boolean?  // True if verified, false if failed, null if pending
  errorMessage       String?   // Error message if verification failed

  // Retry logic
  attempts    Int      @default(0)
  maxAttempts Int      @default(3)
  nextRetryAt DateTime?

  // Timestamps
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  completedAt DateTime?

  // Relations
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  task        Task     @relation(fields: [taskId], references: [id], onDelete: Cascade)
  userTask    UserTask @relation(fields: [userTaskId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@index([taskId])
  @@index([status])
  @@index([nextRetryAt])
  @@map("mission_verification_jobs")
}

enum JobStatus {
  PENDING       // Job created, waiting to be processed
  PROCESSING    // Job is being processed
  COMPLETED     // Job completed successfully
  FAILED        // Job failed after all retries
  CANCELLED     // Job was cancelled
}

// =============================================================================
// Merchandise Store System
// =============================================================================

model Merchandise {
  id          String   @id @default(uuid())
  name        String
  description String   @db.Text
  price       Float    // Price in USD

  // Product details
  category    MerchandiseCategory
  material    String?  // e.g., "100% Cotton", "Polyester Blend"
  features    String[] // Array of feature strings
  tags        String[] // Array of tags for search/filtering

  // Inventory
  inStock     Boolean  @default(true)
  featured    Boolean  @default(false)
  sortOrder   Int      @default(0)

  // Images
  imageUrl    String   // Primary product image

  // Timestamps
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  variants    MerchandiseVariant[]
  images      MerchandiseImage[]
  cartItems   CartItem[]
  orderItems  OrderItem[]

  @@index([category])
  @@index([featured])
  @@index([inStock])
  @@map("merchandise")
}

model MerchandiseVariant {
  id             String   @id @default(uuid())
  merchandiseId  String

  // Variant details
  size           String?  // e.g., "S", "M", "L", "XL", "XXL"
  color          String?  // e.g., "Black", "White", "Red"
  sku            String   @unique // Stock Keeping Unit

  // Pricing and inventory
  priceModifier  Float    @default(0) // Additional price for this variant
  stockQuantity  Int      @default(0)
  inStock        Boolean  @default(true)

  // Timestamps
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt

  // Relations
  merchandise    Merchandise @relation(fields: [merchandiseId], references: [id], onDelete: Cascade)
  cartItems      CartItem[]
  orderItems     OrderItem[]

  @@index([merchandiseId])
  @@index([sku])
  @@map("merchandise_variants")
}

model MerchandiseImage {
  id             String   @id @default(uuid())
  merchandiseId  String

  // Image details
  url            String
  altText        String?
  sortOrder      Int      @default(0)
  isPrimary      Boolean  @default(false)

  // Timestamps
  createdAt      DateTime @default(now())

  // Relations
  merchandise    Merchandise @relation(fields: [merchandiseId], references: [id], onDelete: Cascade)

  @@index([merchandiseId])
  @@map("merchandise_images")
}

enum MerchandiseCategory {
  CLOTHING      // T-shirts, hoodies, jackets
  ACCESSORIES   // Hats, bags, jewelry
  MUSIC         // Vinyl, CDs, digital downloads
  COLLECTIBLES  // Posters, stickers, pins
  OTHER         // Miscellaneous items
}

// =============================================================================
// Shopping Cart System
// =============================================================================

model Cart {
  id        String   @id @default(uuid())
  userId    String   @unique

  // Timestamps
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  items     CartItem[]

  @@map("carts")
}

model CartItem {
  id          String   @id @default(uuid())
  cartId      String
  merchandiseId String
  variantId   String?  // Optional: specific size/color variant

  // Item details
  quantity    Int      @default(1)

  // Timestamps
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  cart        Cart     @relation(fields: [cartId], references: [id], onDelete: Cascade)
  merchandise Merchandise @relation(fields: [merchandiseId], references: [id], onDelete: Cascade)
  variant     MerchandiseVariant? @relation(fields: [variantId], references: [id], onDelete: SetNull)

  @@unique([cartId, merchandiseId, variantId])
  @@index([cartId])
  @@index([merchandiseId])
  @@map("cart_items")
}

// =============================================================================
// Order Management System
// =============================================================================

model Order {
  id              String   @id @default(uuid())
  userId          String
  orderNumber     String   @unique // Human-readable order number

  // Order details
  status          OrderStatus @default(PENDING)
  totalAmount     Float
  currency        String   @default("USD")

  // Shipping information
  shippingName    String
  shippingEmail   String
  shippingAddress String   @db.Text
  shippingCity    String
  shippingState   String?
  shippingZip     String
  shippingCountry String
  shippingPhone   String?

  // Payment information
  paymentMethod   PaymentMethod?
  paymentId       String?  // Klarna/Stripe payment ID
  paidAt          DateTime?

  // Tracking
  trackingNumber  String?
  shippedAt       DateTime?
  deliveredAt     DateTime?

  // Notes
  customerNotes   String?  @db.Text
  adminNotes      String?  @db.Text

  // Timestamps
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt

  // Relations
  user            User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  items           OrderItem[]

  @@index([userId])
  @@index([orderNumber])
  @@index([status])
  @@map("orders")
}

model OrderItem {
  id             String   @id @default(uuid())
  orderId        String
  merchandiseId  String
  variantId      String?

  // Item details at time of purchase
  name           String
  description    String?  @db.Text
  price          Float    // Price at time of purchase
  quantity       Int
  size           String?
  color          String?
  imageUrl       String?

  // Timestamps
  createdAt      DateTime @default(now())

  // Relations
  order          Order    @relation(fields: [orderId], references: [id], onDelete: Cascade)
  merchandise    Merchandise @relation(fields: [merchandiseId], references: [id], onDelete: Restrict)
  variant        MerchandiseVariant? @relation(fields: [variantId], references: [id], onDelete: SetNull)

  @@index([orderId])
  @@index([merchandiseId])
  @@map("order_items")
}

enum OrderStatus {
  PENDING       // Order created, awaiting payment
  PAID          // Payment received
  PROCESSING    // Order being prepared
  SHIPPED       // Order shipped
  DELIVERED     // Order delivered
  CANCELLED     // Order cancelled
  REFUNDED      // Order refunded
}

